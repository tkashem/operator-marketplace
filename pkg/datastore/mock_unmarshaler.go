// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/datastore/unmarshaler.go

// Package datastore is a generated GoMock package.
package datastore

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockblobUnmarshaler is a mock of blobUnmarshaler interface
type MockblobUnmarshaler struct {
	ctrl     *gomock.Controller
	recorder *MockblobUnmarshalerMockRecorder
}

// MockblobUnmarshalerMockRecorder is the mock recorder for MockblobUnmarshaler
type MockblobUnmarshalerMockRecorder struct {
	mock *MockblobUnmarshaler
}

// NewMockblobUnmarshaler creates a new mock instance
func NewMockblobUnmarshaler(ctrl *gomock.Controller) *MockblobUnmarshaler {
	mock := &MockblobUnmarshaler{ctrl: ctrl}
	mock.recorder = &MockblobUnmarshalerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockblobUnmarshaler) EXPECT() *MockblobUnmarshalerMockRecorder {
	return m.recorder
}

// Unmarshal mocks base method
func (m *MockblobUnmarshaler) Unmarshal(rawYAML []byte) (*StructuredOperatorManifestData, error) {
	ret := m.ctrl.Call(m, "Unmarshal", rawYAML)
	ret0, _ := ret[0].(*StructuredOperatorManifestData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unmarshal indicates an expected call of Unmarshal
func (mr *MockblobUnmarshalerMockRecorder) Unmarshal(rawYAML interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockblobUnmarshaler)(nil).Unmarshal), rawYAML)
}

// Marshal mocks base method
func (m *MockblobUnmarshaler) Marshal(marshaled *StructuredOperatorManifestData) (*OperatorManifestData, error) {
	ret := m.ctrl.Call(m, "Marshal", marshaled)
	ret0, _ := ret[0].(*OperatorManifestData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal
func (mr *MockblobUnmarshalerMockRecorder) Marshal(marshaled interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockblobUnmarshaler)(nil).Marshal), marshaled)
}
